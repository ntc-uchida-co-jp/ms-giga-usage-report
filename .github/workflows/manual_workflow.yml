name: manual_workflow

on:
  workflow_dispatch:
    inputs:
      date_range:
        type: integer
        required: true
        description: '何日前までの利用状況データを取得するか入力してください。(1~27が指定可能)'
        default: 3
permissions:
  id-token: write
  contents: read

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_TENANT_NAME: ${{ secrets.AZURE_TENANT_NAME }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}

    steps:
      - name: Set env
        shell: bash
        run: |
          echo "SITE_NAME=M365UsageRecords" >> $GITHUB_ENV

          echo "DOC_LIB=Shared%20Documents" >> $GITHUB_ENV

          echo "${{ inputs.date_range }}日前から前日までのデータを取得します。"
          date_list=""
          for i in {${{ inputs.date_range }}..1}; do
            date=$(date -u -d "$i days ago" +"%Y-%m-%d")
            date_list="${date_list}${date},"
          done
          date_list=${date_list%,}
          echo "DATE_LIST=$date_list" >> $GITHUB_ENV

          utcToday=$(date -u -d "today" +"%Y-%m-%d")
          echo "TODAY_DATE=$utcToday" >> $GITHUB_ENV
          utcTodayYear=$(date -u -d "today" +"%Y")
          utcTodayMonth=$(date -u -d "today" +"%m")
          if [ "$utcTodayMonth" -le 3 ]; then
            utcSchoolYear=$((utcTodayYear - 1))
          else
            utcSchoolYear=$utcTodayYear
          fi
          echo "TODAY_SCHOOL_YEAR=$utcSchoolYear" >> $GITHUB_ENV

          echo "ADMIN_REPORT_SETTING_DIR=M365UsageRecords/M365UsageReports" >> $GITHUB_ENV
          echo "USAGE_REPORT_DIR=M365UsageRecords/M365UsageReports" >> $GITHUB_ENV
          echo "ENTRAID_DIR=Roster/MsGraph/UnConcealed" >> $GITHUB_ENV

      - name: Install PowerShell
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: モジュールのインストール
        shell: pwsh
        run: |
          Install-Module Microsoft.Graph.Beta.Reports -Force -Scope CurrentUser -AllowClobber -Repository PSGallery

      - name: アクセストークンの取得 (GraphAPI)
        shell: bash
        run: |
          federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
              -F client_id=$AZURE_CLIENT_ID \
              -F grant_type=client_credentials \
              -F scope=https://graph.microsoft.com/.default \
              -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
              -F client_assertion=$federated_token)
          access_token=$(echo $response | jq -r '.access_token')
          echo "GRAPH_TOKEN=$access_token" >> $GITHUB_ENV

      - name: アクセストークンの取得 (SharePoint)
        shell: bash
        run: |
          federated_token=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          response=$(curl -s -X POST "https://login.microsoftonline.com/$AZURE_TENANT_ID/oauth2/v2.0/token" \
              -F client_id=$AZURE_CLIENT_ID \
              -F grant_type=client_credentials \
              -F scope=https://$AZURE_TENANT_NAME.sharepoint.com/.default \
              -F client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer \
              -F client_assertion=$federated_token)
          access_token=$(echo $response | jq -r '.access_token')
          echo "SHAREPOINT_TOKEN=$access_token" >> $GITHUB_ENV

      - name: データの取得(利用状況レポートの匿名化設定)
        shell: pwsh
        run: |
          Import-Module Microsoft.Graph.Beta.Reports -Force
          echo "GRAPH_TOKEN is: $GRAPH_TOKEN"
          $secureToken = ConvertTo-SecureString $env:GRAPH_TOKEN -AsPlainText -Force
          Connect-MgGraph -AccessToken $secureToken

          $dateStr = $env:TODAY_DATE
          $date = ([Datetime]$dateStr)
          $school_year = $env:TODAY_SCHOOL_YEAR

          $outputDir = "$env:ADMIN_REPORT_SETTING_DIR/AdminReportSettings/school_year=${school_year}"
          if (-not (Test-Path -Path $outputDir)) {
              New-Item -ItemType Directory -Path $outputDir
          }

          $outputPath = "$outputDir/${dateStr}_result_Get-MgBetaAdminReportSetting.json"
          $reportSettings = Get-MgBetaAdminReportSetting

          $reportSettings | ConvertTo-Json -Depth 10 | Out-File -FilePath $outputPath

          if (Test-Path $outputPath) {
              Write-Host "ファイル '$outputPath' が生成されました。"
          } else {
              Write-Host "ファイル '$outputPath' が生成できませんでした。"
          }

          $displayConcealedNames = $reportSettings.DisplayConcealedNames
          if ($displayConcealedNames -eq "True") {
              "CONCEALED_SETTING=Concealed" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
              "CONCEALED_SETTING=UnConcealed" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          Disconnect-MgGraph

      - name: SharePointへのアップロード(利用状況レポートの匿名化設定)
        shell: pwsh
        run: |
          $dateStr = $env:TODAY_DATE
          $school_year = $env:TODAY_SCHOOL_YEAR

          $foldersAndFiles = @(
            @{ name = "AdminReportSettings"; file = "${dateStr}_result_Get-MgBetaAdminReportSetting.json" }
          )

          function Create-FolderRecursively {
              param (
                  [string]$folderPath
              )
              $parts = $folderPath.TrimStart("/").Split('/')
              $currentPath = "/sites/$env:SITE_NAME/$env:DOC_LIB"

              foreach ($part in $parts) {
                  $currentPath = "$currentPath/$part"
                  $encodedPath = [uri]::EscapeDataString($currentPath.Trim('/'))
                  $checkUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('$encodedPath')"
                  $createUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/folders"

                  try {
                      Invoke-RestMethod -Uri $checkUrl -Method Get -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" }
                  } catch {
                      Write-Host "フォルダ '$currentPath' を作成しています..."
                      $body = @{ "__metadata" = @{ "type" = "SP.Folder" }; "ServerRelativeUrl" = $currentPath } | ConvertTo-Json
                      Invoke-RestMethod -Uri $createUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose"; "Content-Type" = "application/json;odata=verbose" } -Body $body
                  }
              }
          }

          foreach ($item in $foldersAndFiles) {
              $name = $item.name
              $filePath = "$env:ADMIN_REPORT_SETTING_DIR/$name/school_year=${school_year}/$($item.file)"
              $fileName = [System.IO.Path]::GetFileName($filePath)
              $folder = "/$env:ADMIN_REPORT_SETTING_DIR/$name/school_year=${school_year}"

              Create-FolderRecursively -folderPath $folder

              $uploadUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('/sites/$env:SITE_NAME/$env:DOC_LIB$folder')/Files/add(url='$fileName',overwrite=true)"

              if (Test-Path $filePath) {
                  $fileContent = [System.IO.File]::ReadAllBytes($filePath)
                  Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" } -Body $fileContent -ContentType "application/octet-stream"
                  Write-Host "ファイル '$filePath' をアップロードしました。"
              } else {
                  Write-Host "ファイル '$filePath' が見つかりません。"
              }
          }

      - name: データの取得(利用状況レポート)
        shell: pwsh
        run: |
          Import-Module Microsoft.Graph.Reports -Force
          $ErrorActionPreference = 'Stop'

          function Invoke-WithRetry {
              param(
                  [scriptblock]$ScriptBlock,
                  [int]$MaxRetries = 3,
                  [int]$DelaySeconds = 5
              )
              $retryCount = 0
              $success = $false

              while (-not $success -and $retryCount -lt $MaxRetries) {
                  try {
                      & $ScriptBlock
                      $success = $true
                  } catch {
                      $retryCount++
                      Write-Output "Attempt $retryCount failed with error: $_"
                      if ($retryCount -ge $MaxRetries) {
                          throw "Command failed after $MaxRetries attempts."
                      } else {
                          Write-Output "Retrying in $DelaySeconds seconds..."
                          Start-Sleep -Seconds $DelaySeconds
                      }
                  }
              }
          }
          echo "GRAPH_TOKEN is: $GRAPH_TOKEN"
          $secureToken = ConvertTo-SecureString $env:GRAPH_TOKEN -AsPlainText -Force
          Connect-MgGraph -AccessToken $secureToken

          $dates = $env:DATE_LIST -split ','

          foreach ($dateStr in $dates) {
              Write-Output "Processing date: $dateStr"
              $date = [DateTime]::ParseExact($dateStr, "yyyy-MM-dd", $null)

              $year = $date.Year
              $month = $date.Month
              if ($month -le 3) {
                  $school_year = $year - 1
              } else {
                  $school_year = $year
              }

              $reports = @(
                @{ Name = "M365AppUserDetail"; Cmd = "Get-MgReportM365AppUserDetail" },
                @{ Name = "Office365ActiveUserDetail"; Cmd = "Get-MgReportOffice365ActiveUserDetail" },
                @{ Name = "OneDriveActivityUserDetail"; Cmd = "Get-MgReportOneDriveActivityUserDetail" },
                @{ Name = "SharePointActivityUserDetail"; Cmd = "Get-MgReportSharePointActivityUserDetail" },
                @{ Name = "TeamUserActivityUserDetail"; Cmd = "Get-MgReportTeamUserActivityUserDetail" }
              )

              foreach ($report in $reports) {
                  $outputPath = "$env:USAGE_REPORT_DIR/$env:CONCEALED_SETTING/$($report.Name)/school_year=${school_year}/${dateStr}_result_Get-MgReport$($report.Name).csv"
                  Invoke-WithRetry {
                      & $($report.Cmd) -Date $date -OutFile $outputPath
                  }
              }
          }

          Disconnect-MgGraph

      - name: SharePointへのアップロード(利用状況レポート)
        shell: pwsh
        run: |
          $dates = $env:DATE_LIST -split ','

          foreach ($dateStr in $dates) {
              Write-Output "Processing date: $dateStr"
              $date = [DateTime]::ParseExact($dateStr, "yyyy-MM-dd", $null)

              $year = $date.Year
              $month = $date.Month
              if ($month -le 3) {
                  $school_year = $year - 1
              } else {
                  $school_year = $year
              }
              $foldersAndFiles = @(
                @{ name = "M365AppUserDetail"; file = "${dateStr}_result_Get-MgReportM365AppUserDetail.csv" },
                @{ name = "Office365ActiveUserDetail"; file = "${dateStr}_result_Get-MgReportOffice365ActiveUserDetail.csv" },
                @{ name = "OneDriveActivityUserDetail"; file = "${dateStr}_result_Get-MgReportOneDriveActivityUserDetail.csv" },
                @{ name = "SharePointActivityUserDetail"; file = "${dateStr}_result_Get-MgReportSharePointActivityUserDetail.csv" },
                @{ name = "TeamUserActivityUserDetail"; file = "${dateStr}_result_Get-MgReportTeamUserActivityUserDetail.csv" }
              )

              function Create-FolderRecursively {
                  param (
                      [string]$folderPath
                  )
                  $parts = $folderPath.TrimStart("/").Split('/')
                  $currentPath = "/sites/$env:SITE_NAME/$env:DOC_LIB"

                  foreach ($part in $parts) {
                      $currentPath = "$currentPath/$part"
                      $encodedPath = [uri]::EscapeDataString($currentPath.Trim('/'))
                      $checkUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('$encodedPath')"
                      $createUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/folders"

                      try {
                          Invoke-RestMethod -Uri $checkUrl -Method Get -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" }
                      } catch {
                          Write-Host "フォルダ '$currentPath' を作成しています..."
                          $body = @{ "__metadata" = @{ "type" = "SP.Folder" }; "ServerRelativeUrl" = $currentPath } | ConvertTo-Json
                          Invoke-RestMethod -Uri $createUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose"; "Content-Type" = "application/json;odata=verbose" } -Body $body
                      }
                  }
              }

              foreach ($item in $foldersAndFiles) {
                  $name = $item.name
                  $filePath = "$env:USAGE_REPORT_DIR/$env:CONCEALED_SETTING/$name/school_year=${school_year}/$($item.file)"
                  $fileName = [System.IO.Path]::GetFileName($filePath)
                  $folder = "/$env:USAGE_REPORT_DIR/$env:CONCEALED_SETTING/$name/school_year=${school_year}"

                  Create-FolderRecursively -folderPath $folder

                  $uploadUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('/sites/$env:SITE_NAME/$env:DOC_LIB$folder')/Files/add(url='$fileName',overwrite=true)"

                  if (Test-Path $filePath) {
                      $fileContent = [System.IO.File]::ReadAllBytes($filePath)
                      Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" } -Body $fileContent -ContentType "application/octet-stream"
                      Write-Host "ファイル '$filePath' をアップロードしました。"
                  } else {
                      Write-Host "ファイル '$filePath' が見つかりません。"
                  }
              }
          }

      - name: データの取得(Entra ID ユーザー情報)
        shell: pwsh
        if: ${{ env.CONCEALED_SETTING == 'Concealed' }}
        run: |
          Import-Module Microsoft.Graph.Reports -Force
          echo "GRAPH_TOKEN is: $GRAPH_TOKEN"
          $secureToken = ConvertTo-SecureString $env:GRAPH_TOKEN -AsPlainText -Force
          Connect-MgGraph -AccessToken $secureToken

          $dateStr = $env:TODAY_DATE
          $school_year = $env:TODAY_SCHOOL_YEAR

          $outputDir = "$env:ENTRAID_DIR/MgUser/school_year=${school_year}"
          if (-not (Test-Path -Path $outputDir)) {
              New-Item -Path $outputDir -ItemType Directory
          }
          $users = Get-MgUser -All
          Write-Host "ユーザー情報: $($users.Count) 件取得"
          $outputPath = "$outputDir/${dateStr}_result_Get-MgUser.csv"
          $users | Export-Csv -Path $outputPath -NoTypeInformation
          Write-Host "ユーザー情報(csv返還後): $($users.Count) 件取得"

          Disconnect-MgGraph

      - name: SharePointへアップロード(Entra ID ユーザー情報)
        shell: pwsh
        if: ${{ env.CONCEALED_SETTING == 'Concealed' }}
        run: |
          $dateStr = $env:TODAY_DATE
          $school_year = $env:TODAY_SCHOOL_YEAR

          $foldersAndFiles = @(
            @{ name = "MgUser"; file = "${dateStr}_result_Get-MgUser.csv" }
          )

          function Create-FolderRecursively {
              param (
                  [string]$folderPath
              )
              $parts = $folderPath.TrimStart("/").Split('/')
              $currentPath = "/sites/$env:SITE_NAME/$env:DOC_LIB"

              foreach ($part in $parts) {
                  $currentPath = "$currentPath/$part"
                  $encodedPath = [uri]::EscapeDataString($currentPath.Trim('/'))
                  $checkUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('$encodedPath')"
                  $createUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/folders"

                  try {
                      Invoke-RestMethod -Uri $checkUrl -Method Get -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" }
                  } catch {
                      Write-Host "フォルダ '$currentPath' を作成しています..."
                      $body = @{ "__metadata" = @{ "type" = "SP.Folder" }; "ServerRelativeUrl" = $currentPath } | ConvertTo-Json
                      Invoke-RestMethod -Uri $createUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose"; "Content-Type" = "application/json;odata=verbose" } -Body $body
                  }
              }
          }

          foreach ($item in $foldersAndFiles) {
              $name = $item.name
              $filePath = "$env:ENTRAID_DIR/$name/school_year=${school_year}/$($item.file)"
              $fileName = [System.IO.Path]::GetFileName($filePath)
              $folder = "/$env:ENTRAID_DIR/$name/school_year=${school_year}"

              Create-FolderRecursively -folderPath $folder

              $uploadUrl = "https://$env:AZURE_TENANT_NAME.sharepoint.com/sites/$env:SITE_NAME/_api/web/GetFolderByServerRelativeUrl('/sites/$env:SITE_NAME/$env:DOC_LIB$folder')/Files/add(url='$fileName',overwrite=true)"

              if (Test-Path $filePath) {
                  $fileContent = [System.IO.File]::ReadAllBytes($filePath)
                  Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers @{ Authorization = "Bearer $env:SHAREPOINT_TOKEN"; "Accept" = "application/json;odata=verbose" } -Body $fileContent -ContentType "application/octet-stream"
                  Write-Host "ファイル '$filePath' をアップロードしました。"
              } else {
                  Write-Host "ファイル '$filePath' が見つかりません。"
              }
          }
